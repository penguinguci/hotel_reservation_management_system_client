/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package ui.forms;

import dao.AccountDAOImpl;
import dao.GenericDAOImpl;
import dao.StaffDAOImpl;
import entities.Account;
import entities.Role;
import entities.Staff;
import interfaces.AccountDAO;
import interfaces.GenericDAO;
import interfaces.StaffDAO;
import jakarta.persistence.EntityTransaction;
import lombok.SneakyThrows;
import net.coobird.thumbnailator.Thumbnails;
import org.apache.poi.ss.usermodel.Cell;
import org.mindrot.jbcrypt.BCrypt;
import ui.components.table.CustomTableButton;
import ultilities.GenerateString;
import ultilities.ImageConverter;
import ultilities.RegexPattern;
import utils.AppUtil;
import utils.DateUtil;
import utils.ExcelUtil;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.rmi.RemoteException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 * @author Lenovo
 */
public class Form_StaffManagement extends JPanel implements ListSelectionListener{

    /** Creates new form Form_StaffManagement */
    public Form_StaffManagement() {
        initComponents();
        initTableListener();
        initComboboxGender();
        initComboboxGenderSearch();
        loadStaffData();
    }

    private void initTableListener() {
        table.getTable().getSelectionModel().addListSelectionListener(this);
    }

    private void initComboboxGender() {
        String[] genders = {"Nam", "Nữ"};
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Chọn giới tính");
        for (String gender : genders) {
            model.addElement(gender);
        }
        cbx_Gender.setModel(model);
    }

    private void initComboboxGenderSearch() {
        String[] genders = {"Nam", "Nữ"};
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Chọn giới tính");
        for (String gender : genders) {
            model.addElement(gender);
        }
        cbx_GenderSearch.setModel(model);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_Title = new JPanel();
        jLabel1 = new JLabel();
        pnl_Infor = new JPanel();
        pnl_Input = new JPanel();
        pnl_InforLeft = new JPanel();
        jPanel1 = new JPanel();
        lbl_FirstName = new JLabel();
        lbl_Phone = new JLabel();
        lbl_Username = new JLabel();
        lbl_Gender = new JLabel();
        lbl_BirthDate = new JLabel();
        jPanel2 = new JPanel();
        txt_FirstName = new JTextField();
        txt_Phone = new JTextField();
        txt_Username = new JTextField();
        cbx_Gender = new ui.components.combobox.StyledComboBox();
        calendar_BirthDate = new ui.components.calendar.CustomCalendar();
        pnl_InforRight = new JPanel();
        jPanel3 = new JPanel();
        lbl_LastName = new JLabel();
        lbl_Email = new JLabel();
        lbl_Password = new JLabel();
        lbl_Address = new JLabel();
        lbl_JoinDate = new JLabel();
        jPanel4 = new JPanel();
        txt_LastName = new JTextField();
        txt_Email = new JTextField();
        txt_Password = new JTextField();
        txt_Address = new JTextField();
        calendar_JoinDate = new ui.components.calendar.CustomCalendar();
        pnl_Image = new JPanel();
        lbl_Avatar = new ui.components.label.LabelImage();
        btn_UploadImage = new ui.components.button.ButtonCustom();
        btn_Clear = new ui.components.button.ButtonCancelCustom();
        pnl_Search = new JPanel();
        jPanel5 = new JPanel();
        lbl_StaffIDSearch = new JLabel();
        lbl_NameSearch = new JLabel();
        lbl_PhoneSearch = new JLabel();
        lbl_GenderSearch = new JLabel();
        jPanel6 = new JPanel();
        txt_IDSearch = new JTextField();
        txt_NameSearch = new JTextField();
        txt_PhoneSearch = new JTextField();
        cbx_GenderSearch = new ui.components.combobox.StyledComboBox();
        btn_Search = new ui.components.button.ButtonCustom();
        pnl_ListStaff = new JPanel();
        table = new CustomTableButton();
        pnl_GroupButton = new JPanel();
        btn_Add = new ui.components.button.ButtonCustom();
        btn_Update = new ui.components.button.ButtonCustom();
        btn_Import = new ui.components.button.ButtonCustom();
        btn_Export = new ui.components.button.ButtonCustom();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1200, 1052));

        pnl_Title.setBackground(new java.awt.Color(255, 255, 255));
        pnl_Title.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 255));
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Quản lý nhân viên");
        pnl_Title.add(jLabel1, java.awt.BorderLayout.CENTER);

        pnl_Infor.setBackground(new java.awt.Color(255, 255, 255));
        pnl_Infor.setBorder(BorderFactory.createTitledBorder(null, "Thông tin nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16), new java.awt.Color(153, 153, 255))); // NOI18N

        pnl_Input.setBackground(new java.awt.Color(255, 255, 255));

        pnl_InforLeft.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.GridLayout(5, 1));

        lbl_FirstName.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_FirstName.setText("Họ:");
        jPanel1.add(lbl_FirstName);

        lbl_Phone.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Phone.setText("Số điện thoại:");
        jPanel1.add(lbl_Phone);

        lbl_Username.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Username.setText("Tài khoản:");
        jPanel1.add(lbl_Username);

        lbl_Gender.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Gender.setText("Giới tính:");
        jPanel1.add(lbl_Gender);

        lbl_BirthDate.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_BirthDate.setText("Ngày sinh:");
        jPanel1.add(lbl_BirthDate);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 12));

        txt_FirstName.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_FirstName.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel2.add(txt_FirstName);

        txt_Phone.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_Phone.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel2.add(txt_Phone);

        txt_Username.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_Username.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel2.add(txt_Username);

        cbx_Gender.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jPanel2.add(cbx_Gender);
        jPanel2.add(calendar_BirthDate);

        GroupLayout pnl_InforLeftLayout = new GroupLayout(pnl_InforLeft);
        pnl_InforLeft.setLayout(pnl_InforLeftLayout);
        pnl_InforLeftLayout.setHorizontalGroup(
            pnl_InforLeftLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InforLeftLayout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 232, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_InforLeftLayout.setVerticalGroup(
            pnl_InforLeftLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnl_InforRight.setBackground(new java.awt.Color(255, 255, 255));
        pnl_InforRight.setPreferredSize(new java.awt.Dimension(300, 223));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.GridLayout(5, 1));

        lbl_LastName.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_LastName.setText("Tên:");
        jPanel3.add(lbl_LastName);

        lbl_Email.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Email.setText("Email:");
        jPanel3.add(lbl_Email);

        lbl_Password.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Password.setText("Mật khẩu:");
        jPanel3.add(lbl_Password);

        lbl_Address.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Address.setText("Địa chỉ:");
        jPanel3.add(lbl_Address);

        lbl_JoinDate.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_JoinDate.setText("Ngày làm:");
        jPanel3.add(lbl_JoinDate);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new java.awt.GridLayout(5, 1, 0, 12));

        txt_LastName.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_LastName.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txt_LastName.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txt_LastNameActionPerformed(evt);
            }
        });
        jPanel4.add(txt_LastName);

        txt_Email.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_Email.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel4.add(txt_Email);

        txt_Password.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_Password.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txt_Password.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txt_PasswordActionPerformed(evt);
            }
        });
        jPanel4.add(txt_Password);

        txt_Address.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_Address.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel4.add(txt_Address);
        jPanel4.add(calendar_JoinDate);

        GroupLayout pnl_InforRightLayout = new GroupLayout(pnl_InforRight);
        pnl_InforRight.setLayout(pnl_InforRightLayout);
        pnl_InforRightLayout.setHorizontalGroup(
            pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 347, Short.MAX_VALUE)
            .addGroup(pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(pnl_InforRightLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(266, Short.MAX_VALUE)))
            .addGroup(pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, pnl_InforRightLayout.createSequentialGroup()
                    .addContainerGap(109, Short.MAX_VALUE)
                    .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, 232, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        pnl_InforRightLayout.setVerticalGroup(
            pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
            .addGroup(pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
        );

        GroupLayout pnl_InputLayout = new GroupLayout(pnl_Input);
        pnl_Input.setLayout(pnl_InputLayout);
        pnl_InputLayout.setHorizontalGroup(
            pnl_InputLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InputLayout.createSequentialGroup()
                .addComponent(pnl_InforLeft, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnl_InforRight, GroupLayout.PREFERRED_SIZE, 347, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_InputLayout.setVerticalGroup(
            pnl_InputLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(pnl_InforLeft, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnl_InforRight, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnl_Image.setBackground(new java.awt.Color(255, 255, 255));

        btn_UploadImage.setText("Thêm ảnh");
        btn_UploadImage.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_UploadImageActionPerformed(evt);
            }
        });

        GroupLayout pnl_ImageLayout = new GroupLayout(pnl_Image);
        pnl_Image.setLayout(pnl_ImageLayout);
        pnl_ImageLayout.setHorizontalGroup(
            pnl_ImageLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, pnl_ImageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Avatar, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
            .addGroup(pnl_ImageLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btn_UploadImage, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 21, Short.MAX_VALUE))
        );
        pnl_ImageLayout.setVerticalGroup(
            pnl_ImageLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_ImageLayout.createSequentialGroup()
                .addComponent(lbl_Avatar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_UploadImage, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        btn_Clear.setText("Xóa trắng");
        btn_Clear.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_ClearActionPerformed(evt);
            }
        });

        GroupLayout pnl_InforLayout = new GroupLayout(pnl_Infor);
        pnl_Infor.setLayout(pnl_InforLayout);
        pnl_InforLayout.setHorizontalGroup(
            pnl_InforLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_InforLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_InforLayout.createSequentialGroup()
                        .addComponent(btn_Clear, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnl_InforLayout.createSequentialGroup()
                        .addComponent(pnl_Input, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(pnl_Image, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
        );
        pnl_InforLayout.setVerticalGroup(
            pnl_InforLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_InforLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_Image, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_Input, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btn_Clear, GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
        );

        pnl_Search.setBackground(new java.awt.Color(255, 255, 255));
        pnl_Search.setBorder(BorderFactory.createTitledBorder(null, "Tìm kiếm nhân viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 16), new java.awt.Color(153, 153, 255))); // NOI18N
        pnl_Search.setPreferredSize(new java.awt.Dimension(360, 29));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new java.awt.GridLayout(4, 1));

        lbl_StaffIDSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_StaffIDSearch.setText("Mã nhân viên:");
        jPanel5.add(lbl_StaffIDSearch);

        lbl_NameSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_NameSearch.setText("Họ và tên:");
        jPanel5.add(lbl_NameSearch);

        lbl_PhoneSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_PhoneSearch.setText("Số điện thoại:");
        jPanel5.add(lbl_PhoneSearch);

        lbl_GenderSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        lbl_GenderSearch.setText("Giới tính:");
        jPanel5.add(lbl_GenderSearch);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 0, 15));

        txt_IDSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_IDSearch.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel6.add(txt_IDSearch);

        txt_NameSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_NameSearch.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        txt_NameSearch.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txt_NameSearchActionPerformed(evt);
            }
        });
        jPanel6.add(txt_NameSearch);

        txt_PhoneSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        txt_PhoneSearch.setBorder(BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel6.add(txt_PhoneSearch);

        cbx_GenderSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jPanel6.add(cbx_GenderSearch);

        btn_Search.setText("Tìm kiếm");
        btn_Search.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_SearchActionPerformed(evt);
            }
        });

        GroupLayout pnl_SearchLayout = new GroupLayout(pnl_Search);
        pnl_Search.setLayout(pnl_SearchLayout);
        pnl_SearchLayout.setHorizontalGroup(
            pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, pnl_SearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(pnl_SearchLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_Search, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_SearchLayout.createSequentialGroup()
                        .addComponent(jPanel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, 253, GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );
        pnl_SearchLayout.setVerticalGroup(
            pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_SearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_Search, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
        );

        pnl_ListStaff.setBackground(new java.awt.Color(255, 255, 255));
        pnl_ListStaff.setLayout(new java.awt.BorderLayout());

        table.setColumnNames(new String[] {"Mã nhân viên", "Tên nhân viên", "Giới tính", "Ngày sinh", "Số điện thoại", "Email", "Địa chỉ", "Chức vụ", "Ngày vào làm", "Trạng thái"});
        table.setHeaderBackgroundColor(new java.awt.Color(153, 153, 255));
        pnl_ListStaff.add(table, java.awt.BorderLayout.CENTER);

        pnl_GroupButton.setBackground(new java.awt.Color(255, 255, 255));
        pnl_GroupButton.setLayout(new java.awt.GridLayout(4, 1, 0, 20));

        btn_Add.setText("Thêm");
        btn_Add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_AddActionPerformed(evt);
            }
        });
        pnl_GroupButton.add(btn_Add);

        btn_Update.setText("Cập nhật");
        btn_Update.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_UpdateActionPerformed(evt);
            }
        });
        pnl_GroupButton.add(btn_Update);

        btn_Import.setText("Import");
        btn_Import.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_ImportActionPerformed(evt);
            }
        });
        pnl_GroupButton.add(btn_Import);

        btn_Export.setText("Export");
        btn_Export.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_ExportActionPerformed(evt);
            }
        });
        pnl_GroupButton.add(btn_Export);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(pnl_Title, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_Infor, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_Search, GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_ListStaff, GroupLayout.PREFERRED_SIZE, 1102, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_GroupButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_Title, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_Infor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_Search, GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_ListStaff, GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnl_GroupButton, GroupLayout.PREFERRED_SIZE, 256, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txt_LastNameActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txt_LastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LastNameActionPerformed

    private void txt_PasswordActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txt_PasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PasswordActionPerformed

    private void txt_NameSearchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txt_NameSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_NameSearchActionPerformed

    private void btn_UploadImageActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_UploadImageActionPerformed
        uploadImage();
    }//GEN-LAST:event_btn_UploadImageActionPerformed

    private void btn_AddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_AddActionPerformed
        add();
    }//GEN-LAST:event_btn_AddActionPerformed

    private void btn_UpdateActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_UpdateActionPerformed
        update();
    }//GEN-LAST:event_btn_UpdateActionPerformed

    private void btn_ImportActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_ImportActionPerformed
        importData();
    }//GEN-LAST:event_btn_ImportActionPerformed

    private void btn_ExportActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_ExportActionPerformed
        exportData();
    }//GEN-LAST:event_btn_ExportActionPerformed

    private void btn_SearchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_SearchActionPerformed
        search();
    }//GEN-LAST:event_btn_SearchActionPerformed

    private void btn_ClearActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_ClearActionPerformed
        clearForm();
    }//GEN-LAST:event_btn_ClearActionPerformed
    private void btnResetActionPerformed(ActionEvent evt) {

    }



    // Hàm upload ảnh
    private void uploadImage() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", ImageIO.getReaderFileSuffixes()));

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                BufferedImage originalImage = ImageIO.read(selectedFile);

                // Resize ảnh để phù hợp với kích thước hiển thị
                BufferedImage resizedImage = Thumbnails.of(originalImage)
                        .size(140, 140)
                        .asBufferedImage();

                // Hiển thị ảnh lên label
                lbl_Avatar.setIcon(new ImageIcon(resizedImage));

                String imageBase64 = ImageConverter.imageToBase64String(resizedImage, "png");

                byte[] imageBytes = Files.readAllBytes(selectedFile.toPath());
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Lỗi khi tải ảnh!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }


    // Hàm Validate dữ liệu
    private boolean validateInput() {
        if (txt_FirstName.getText().trim().isEmpty() || txt_LastName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Họ và tên không được để trống!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_FirstName.requestFocus();
            return false;
        }

        String phone = txt_Phone.getText().trim();
        if (phone.isEmpty() || !phone.matches(RegexPattern.PHONE_VN)) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_Phone.requestFocus();
            return false;
        }

        String email = txt_Email.getText().trim();
        if (!email.isEmpty() && !email.matches(RegexPattern.EMAIL)) {
            JOptionPane.showMessageDialog(this, "Email không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_Email.requestFocus();
            return false;
        }


        if (calendar_BirthDate.getSelectedDate() == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ngày sinh!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            calendar_BirthDate.requestFocus();
            return false;
        }

        return true;
    }

    private void clearForm() {
        txt_FirstName.setText("");
        txt_LastName.setText("");
        txt_Phone.setText("");
        txt_Email.setText("");
        txt_Address.setText("");
        cbx_Gender.setSelectedIndex(0);
        txt_Username.setText("");
        txt_Username.setEnabled(true);
        txt_Password.setText("");
        calendar_BirthDate.setSelectedDate(null);
        calendar_JoinDate.setSelectedDate(null);
        lbl_Avatar.setIcon(null);
        table.getTable().clearSelection();

        txt_NameSearch.setText("");
        txt_PhoneSearch.setText("");
        cbx_GenderSearch.setSelectedIndex(0);
        txt_IDSearch.setText("");

        loadStaffData();
    }

    private void loadStaffData() {
        try {
            StaffDAO staffDAO = new StaffDAOImpl();
            CustomTableButton.CustomTableModel model = table.getTableModel();
            model.clearData();

            for (Staff staff : staffDAO.findAll()) {
                Object[] rowData = {
                        staff.getStaffId(),
                        staff.getFirstName() + " " + staff.getLastName(),
                        staff.isGender() ? "Nam" : "Nữ",
                        staff.getDateOfBirth(),
                        String.join(", ", staff.getPhoneNumbers()),
                        staff.getEmail(),
                        staff.getAddress(),
                        staff.getAccount().getRole() != null ? staff.getAccount().getRole() : "",
                        staff.getDateOfJoin(),
                        staff.isStatus() ? "Đang làm" : "Đã nghỉ"
                };
                model.addRow(rowData, null);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tải dữ liệu nhân viên", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }



    // Add staff
    private void add() {
        if (!validateInput()) {
            return;
        }

        EntityTransaction transaction = null;
        try {
            StaffDAO staffDAO = new StaffDAOImpl();
            AccountDAO accountDAO = new AccountDAOImpl();
            GenericDAO<Staff, String> staffDAOGeneric = new GenericDAOImpl<>(Staff.class);
            GenericDAO<Account, String> accountDAOGeneric = new GenericDAOImpl<>(Account.class);

            String phone = txt_Phone.getText().trim();
            if (staffDAO.isPhoneExists(phone)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String email = txt_Email.getText().trim();
            if (staffDAO.isEmailExists(email)) {
                JOptionPane.showMessageDialog(this, "Email đã tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Kiểm tra tên đăng nhập
            String username = txt_Username.getText().trim();
            if (accountDAO.isUsernameExists(username)) {
                JOptionPane.showMessageDialog(this, "Tên đăng nhập đã tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Tạo đối tượng Staff
            Staff newStaff = new Staff();
            newStaff.setStaffId(GenerateString.generateStaffId());
            newStaff.setFirstName(txt_FirstName.getText().trim());
            newStaff.setLastName(txt_LastName.getText().trim());
            newStaff.setGender(cbx_Gender.getSelectedIndex() == 1); // 1 là Nam, 2 là Nữ
            newStaff.setDateOfBirth(calendar_BirthDate.getSelectedDate());

            Set<String> phoneNumbers = new HashSet<>();
            phoneNumbers.add(txt_Phone.getText().trim());
            newStaff.setPhoneNumbers(phoneNumbers);

            newStaff.setAddress(txt_Address.getText().trim());
            newStaff.setEmail(txt_Email.getText().trim());
            newStaff.setDateOfJoin(calendar_JoinDate.getSelectedDate());
            newStaff.setStatus(true); // Mặc định active

            // Xử lý ảnh đại diện nếu có
            if (lbl_Avatar.getIcon() != null) {
                String imageBase64 = ImageConverter.convertImageToBase64((ImageIcon) lbl_Avatar.getIcon());
                newStaff.setStaffImage(imageBase64);
            }

            // Tạo đối tượng Account và băm mật khẩu
            Account newAccount = new Account();
            newAccount.setUsername(username);
            String plainPassword = txt_Password.getText().trim();
            String hashedPassword = BCrypt.hashpw(plainPassword, BCrypt.gensalt());
            newAccount.setPassword(hashedPassword);
            newAccount.setRole(Role.STAFF); // Mặc định là nhân viên lễ tân
            newAccount.setStaff(newStaff);

            // Xử lý transaction
            transaction = AppUtil.getEntityManager().getTransaction();
            transaction.begin();
            if (staffDAOGeneric.create(newStaff) && accountDAOGeneric.create(newAccount)) {
                transaction.commit();
                JOptionPane.showMessageDialog(this, "Thêm nhân viên thành công!");
                clearForm();
                loadStaffData();
            } else {
                transaction.rollback();
                JOptionPane.showMessageDialog(this, "Thêm nhân viên thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm nhân viên!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            int row = table.getTable().getSelectedRow();
            System.out.println(row);
            if (row >= 0) {
                try {
                    fillRow(row);
                } catch (RemoteException ex) {
                    throw new RuntimeException(ex);
                }
            }
        }
    }

    private void fillRow(int row) throws RemoteException {
        CustomTableButton.CustomTableModel model = table.getTableModel();
        Object[] rowData = model.getRowData(row);

        String id = rowData[0].toString();
        StaffDAO staffDAO = new StaffDAOImpl();
        AccountDAO accountDAO = new AccountDAOImpl();
        Staff staff = staffDAO.findById(id);
        Account account = accountDAO.findAccoutByStaffID(staff.getStaffId());
        txt_FirstName.setText(staff.getFirstName());
        txt_LastName.setText(staff.getLastName());
        txt_Phone.setText(staff.getPhoneNumbers().iterator().next());
        txt_Email.setText(staff.getEmail());
        txt_Address.setText(staff.getAddress());
        txt_Username.setText(account.getUsername());
        txt_Username.setEnabled(false);
        txt_Password.setText(account.getPassword());
        calendar_BirthDate.setSelectedDate(staff.getDateOfBirth());
        calendar_JoinDate.setSelectedDate(staff.getDateOfJoin());
        cbx_Gender.setSelectedItem(staff.isGender() == true ? "Nam" : "Nữ");

        try {
            String base64Image = staff.getStaffImage();
            if (base64Image != null && !base64Image.isEmpty()) {
                BufferedImage originalImage = ImageConverter.base64StringToImage(base64Image);

                if (originalImage != null) {
                    BufferedImage resizedImage = Thumbnails.of(originalImage)
                            .size(140, 140)
                            .asBufferedImage();

                    lbl_Avatar.setIcon(new ImageIcon(resizedImage));
                } else {
                    lbl_Avatar.setIcon(null);
                }
            } else {
                lbl_Avatar.setIcon(null);
            }
        } catch (Exception e) {
            e.printStackTrace();
            lbl_Avatar.setIcon(null);
        }

    }


    // Update staff
    private void update() {
        int selectedRow = table.getTable().getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên cần cập nhật!",
                    "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!validateInput()) {
            return;
        }

        try {
            StaffDAO staffDAO = new StaffDAOImpl();
            AccountDAO accountDAO = new AccountDAOImpl();

            CustomTableButton.CustomTableModel model = table.getTableModel();
            Object[] rowData = model.getRowData(selectedRow);

            String staffID = rowData[0].toString();
            Staff staff = staffDAO.findById(staffID);

            staff.setFirstName(txt_FirstName.getText() != null ? txt_FirstName.getText().trim() : "");
            staff.setLastName(txt_LastName.getText() != null ? txt_LastName.getText().trim() : "");
            staff.setGender(cbx_Gender.getSelectedIndex() == 1);
            staff.setDateOfBirth(calendar_BirthDate.getSelectedDate());

            String phoneText = (txt_Phone.getText() != null ? txt_Phone.getText().trim() : "");
            Set<String> phoneNumbers = new HashSet<>();
            phoneNumbers.add(phoneText);
            staff.setPhoneNumbers(phoneNumbers);

            staff.setAddress(txt_Address.getText() != null ? txt_Address.getText().trim() : "");
            staff.setEmail(txt_Email.getText() != null ? txt_Email.getText().trim() : "");
            staff.setDateOfJoin(calendar_JoinDate.getSelectedDate());

            if (lbl_Avatar.getIcon() != null) {
                String imageBase64 = ImageConverter.convertImageToBase64((ImageIcon) lbl_Avatar.getIcon());
                if (imageBase64 != null) {
                    staff.setStaffImage(imageBase64);
                } else {
                    System.out.println("Không thể chuyển đổi ảnh sang Base64.");
                }
            }

            // Cập nhật thông tin Account
            String username = txt_Username.getText() != null ? txt_Username.getText().trim() : "";
            Account account = accountDAO.getAccount(username);
            String newPassword = txt_Password.getText() != null ? txt_Password.getText().trim() : "";
            if (!newPassword.isEmpty() && !newPassword.equals(account.getPassword())) {
                account.setPassword(newPassword);
            }
            account.setStaff(staff);

            boolean accountUpdated = accountDAO.update(account);
            boolean staffUpdated = staffDAO.update(staff);

            if (!accountUpdated || !staffUpdated) {
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật nhân viên thành công!",
                        "Thành công", JOptionPane.INFORMATION_MESSAGE);
                loadStaffData();
                clearForm();
            }
        } catch (Exception e) {
            e.printStackTrace();
            String errorMessage = e.getMessage() != null ? e.getMessage() : "Lỗi không xác định: " + e.getClass().getName();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật: " + errorMessage,
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Search staff
    @SneakyThrows
    private void search() {
        String id = txt_IDSearch.getText().trim();
        String name = txt_NameSearch.getText().trim();
        String phone = txt_PhoneSearch.getText().trim();
        Boolean gender = null;

        if (cbx_GenderSearch.getSelectedIndex() > 0) {
            gender = cbx_GenderSearch.getSelectedIndex() == 1;
        }

        StaffDAO staffDAO = new StaffDAOImpl();
        List<Staff> staffList = staffDAO.searchStaffAdvanced(id, name, phone, gender);

        CustomTableButton.CustomTableModel model = table.getTableModel();
        model.clearData();

        for (Staff staff : staffList) {
            Object[] rowData = {
                    staff.getStaffId(),
                    staff.getFirstName() + " " + staff.getLastName(),
                    staff.isGender() ? "Nam" : "Nữ",
                    staff.getDateOfBirth(),
                    String.join(", ", staff.getPhoneNumbers()),
                    staff.getEmail(),
                    staff.getAddress(),
                    staff.getAccount().getRole() != null ? staff.getAccount().getRole() : "",
                    staff.getDateOfJoin(),
                    staff.isStatus() ? "Đang làm" : "Đã nghỉ"
            };
            model.addRow(rowData, null);
        }
    }

    //    // Export
    private void exportData() {
        ExcelUtil.exportToExcel(
                table,
                "Xuất dữ liệu nhân viên",
                "Danh sách nhân viên",
                this
        );
    }

    // Import
    @SneakyThrows
    private void importData() {
        StaffDAO staffDAO = new StaffDAOImpl();
        GenericDAO<Staff, String> staffGenericDAO = new GenericDAOImpl<>(Staff.class);
        GenericDAO<Account, String> accountGenericDAO = new GenericDAOImpl<>(Account.class);

        boolean success =  ExcelUtil.importFromExcel(this, row -> {
            EntityTransaction transaction = AppUtil.getEntityManager().getTransaction();
            try {
                Staff staff = new Staff();
                staff.setStaffId(getCellStringValue(row.getCell(0)));
                staff.setFirstName(getCellStringValue(row.getCell(1)).split(" ")[0]);
                staff.setLastName(getCellStringValue(row.getCell(1)).split(" ")[1]);

                String genderStr = getCellStringValue(row.getCell(2));
                staff.setGender("Nam".equalsIgnoreCase(genderStr));

                String dobStr = getCellStringValue(row.getCell(3));
                staff.setDateOfBirth(DateUtil.parseDateFlexible(dobStr));

                Set<String> phoneNumbers = new HashSet<>();
                phoneNumbers.add(getCellStringValue(row.getCell(4)));
                staff.setPhoneNumbers(phoneNumbers);

                staff.setEmail(getCellStringValue(row.getCell(5)));

                staff.setAddress(getCellStringValue(row.getCell(6)));

                String joinDateStr = getCellStringValue(row.getCell(8));
                staff.setDateOfJoin(DateUtil.parseDateFlexible(joinDateStr));

                String statusStr = getCellStringValue(row.getCell(9));
                staff.setStatus("Đang làm".equalsIgnoreCase(statusStr));

                Account account = new Account();
                String userName = GenerateString.generateUserName(staff.getFirstName() + " " + staff.getLastName());
                account.setUsername(userName);
                account.setPassword("123456");
                account.setRole(Role.STAFF);
                account.setStaff(staff);

                if (staffDAO.isPhoneExists(phoneNumbers.iterator().next())) {
                    JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại: " + phoneNumbers.iterator().next(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                transaction.begin();
                staffGenericDAO.create(staff);
                accountGenericDAO.create(account);
                transaction.commit();
                return true;
            } catch (Exception e) {
                if (transaction.isActive()) {
                    transaction.rollback();
                }
                JOptionPane.showMessageDialog(this, "Lỗi khi nhập dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        });

        if (success) {
            loadStaffData();
        }
    }

    // Helper method to get cell value as String
    private String getCellStringValue(Cell cell) {
        if (cell == null) {
            return null;
        }
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return String.valueOf((int) cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            default:
                return "";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ui.components.button.ButtonCustom btn_Add;
    private ui.components.button.ButtonCancelCustom btn_Clear;
    private ui.components.button.ButtonCustom btn_Export;
    private ui.components.button.ButtonCustom btn_Import;
    private ui.components.button.ButtonCustom btn_Search;
    private ui.components.button.ButtonCustom btn_Update;
    private ui.components.button.ButtonCustom btn_UploadImage;
    private ui.components.calendar.CustomCalendar calendar_BirthDate;
    private ui.components.calendar.CustomCalendar calendar_JoinDate;
    private ui.components.combobox.StyledComboBox cbx_Gender;
    private ui.components.combobox.StyledComboBox cbx_GenderSearch;
    private JLabel jLabel1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JLabel lbl_Address;
    private ui.components.label.LabelImage lbl_Avatar;
    private JLabel lbl_BirthDate;
    private JLabel lbl_Email;
    private JLabel lbl_FirstName;
    private JLabel lbl_Gender;
    private JLabel lbl_GenderSearch;
    private JLabel lbl_JoinDate;
    private JLabel lbl_LastName;
    private JLabel lbl_NameSearch;
    private JLabel lbl_Password;
    private JLabel lbl_Phone;
    private JLabel lbl_PhoneSearch;
    private JLabel lbl_StaffIDSearch;
    private JLabel lbl_Username;
    private JPanel pnl_GroupButton;
    private JPanel pnl_Image;
    private JPanel pnl_Infor;
    private JPanel pnl_InforLeft;
    private JPanel pnl_InforRight;
    private JPanel pnl_Input;
    private JPanel pnl_ListStaff;
    private JPanel pnl_Search;
    private JPanel pnl_Title;
    private CustomTableButton table;
    private JTextField txt_Address;
    private JTextField txt_Email;
    private JTextField txt_FirstName;
    private JTextField txt_IDSearch;
    private JTextField txt_LastName;
    private JTextField txt_NameSearch;
    private JTextField txt_Password;
    private JTextField txt_Phone;
    private JTextField txt_PhoneSearch;
    private JTextField txt_Username;
    // End of variables declaration//GEN-END:variables

}
