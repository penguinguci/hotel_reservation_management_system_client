/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.dialogs;

import dao.ServicesDAOImpl;
import entities.ReservationDetails;
import entities.Service;
import interfaces.ServicesDAO;
import lombok.SneakyThrows;
import org.apache.poi.ss.usermodel.Row;
import ui.components.table.CustomTableButton;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author TRAN LONG VU
 */
public class Dialog_AddService extends JPanel {
    private String roomID;
    private static List<ReservationDetails> selectedService;

    /**
     * Creates new form Dialog_AddService
     */
    public Dialog_AddService(String roomID) {
        this.roomID = roomID;
        initComponents();
        initDataTableService();
        initSearchServices();
        initCartTable();
    }

    public static List<ReservationDetails> getSelectedService() {
        return selectedService;
    }

    public  void setSelectedService(List<ReservationDetails> selectedService) {
        this.selectedService = selectedService;
    }


    private void initCartTable() {
        CustomTableButton.ColumnEditorType[] editorTypes = {
                CustomTableButton.ColumnEditorType.DEFAULT,
                CustomTableButton.ColumnEditorType.DEFAULT,
                CustomTableButton.ColumnEditorType.SPINNER,
                CustomTableButton.ColumnEditorType.DEFAULT,
                CustomTableButton.ColumnEditorType.DEFAULT,
        };

        table_CartService.setColumnEditorTypes(editorTypes);

        table_CartService.getTable().getColumnModel().getColumn(2).setCellRenderer(new CustomTableButton.SpinnerRenderer());
        table_CartService.getTable().getColumnModel().getColumn(2).setCellEditor(new CustomTableButton.SpinnerEditor());

        // Add listener to update row price when quantity changes
        table_CartService.getTable().getModel().addTableModelListener(e -> {
            if (e.getColumn() == 2) { // When quantity column changes
                updateRowPrice(e.getFirstRow());
                updateCartTotal();
            }
        });
    }

    private void initSearchServices() {
        txt_SearchServices.getTextField().getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateSearchServices();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateSearchServices();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateSearchServices();
            }
        });
    }

    @SneakyThrows
    private void updateSearchServices() {
        String keyword = txt_SearchServices.getText().trim();
        ServicesDAO servicesDAO = new ServicesDAOImpl();
        List<Service> services = servicesDAO.searchServices(keyword, true);
        displayServicesTable(services);
    }

    @SneakyThrows
    private void initDataTableService() {
        ServicesDAO servicesDAO = new ServicesDAOImpl();
        List<Service> services = servicesDAO.findAll();

        lbl_RoomID.setText(roomID);
        displayServicesTable(services);
    }

    private void displayServicesTable(List<Service> services) {
        CustomTableButton.CustomTableModel model = table_ListService.getTableModel();
        model.clearData();

        for (Service service : services) {
            Object[] rowData = {
                    service.getServiceId(),
                    service.getName(),
                    String.format("%,.0f VND", service.getPrice()),
                    service.getDescription(),
                    service.isAvailability() ? "Có sẵn" : "Không có sẵn"
            };
            model.addRow(rowData, null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_Title = new JPanel();
        lbl_Title = new JLabel();
        lbl_RoomID = new JLabel();
        pnl_Search = new JPanel();
        txt_SearchServices = new ui.components.textfield.SearchTextField();
        pnl_Title_ListService = new JPanel();
        lbl_Title_ListService = new JLabel();
        pnl_ListService = new JPanel();
        table_ListService = new CustomTableButton();
        pnl_CartService = new JPanel();
        table_CartService = new CustomTableButton();
        pnl_InforAddService = new JPanel();
        pnl_Title_TotalPrice = new JPanel();
        lbl_Title_TotalPrice = new JLabel();
        pnl_TotalPrice = new JPanel();
        lbl_TotalPrice_Value = new JLabel();
        btn_Complete = new ui.components.button.ButtonCustom();
        btn_Cancel = new ui.components.button.ButtonCancelCustom();
        btn_AddService = new ui.components.button.ButtonCustom();
        pnl_Title_SelectedService = new JPanel();
        lbl_Title_SelectedService = new JLabel();
        btn_DeleteOne = new ui.components.button.ButtonCancelCustom();
        btn_DeleteAll = new ui.components.button.ButtonCancelCustom();

        setBackground(new Color(255, 255, 255));
        setMinimumSize(new Dimension(1000, 600));
        setPreferredSize(new Dimension(1000, 600));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnl_Title.setBackground(new Color(255, 255, 255));

        lbl_Title.setFont(new Font("Segoe UI", 1, 16)); // NOI18N
        lbl_Title.setForeground(new Color(153, 153, 255));
        lbl_Title.setText("Thêm dịch vụ phòng");

        lbl_RoomID.setFont(new Font("Segoe UI", 1, 16)); // NOI18N
        lbl_RoomID.setForeground(new Color(102, 102, 255));

        GroupLayout pnl_TitleLayout = new GroupLayout(pnl_Title);
        pnl_Title.setLayout(pnl_TitleLayout);
        pnl_TitleLayout.setHorizontalGroup(
            pnl_TitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_TitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Title)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_RoomID, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(612, Short.MAX_VALUE))
        );
        pnl_TitleLayout.setVerticalGroup(
            pnl_TitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, pnl_TitleLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnl_TitleLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_RoomID, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_Title, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        add(pnl_Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 840, 30));

        pnl_Search.setBackground(new Color(255, 255, 255));

        txt_SearchServices.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        txt_SearchServices.setPlaceholder("Nhập tên dịch vụ...");
        txt_SearchServices.setPlaceholderColor(new Color(102, 102, 102));

        GroupLayout pnl_SearchLayout = new GroupLayout(pnl_Search);
        pnl_Search.setLayout(pnl_SearchLayout);
        pnl_SearchLayout.setHorizontalGroup(
            pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_SearchLayout.createSequentialGroup()
                .addComponent(txt_SearchServices, GroupLayout.PREFERRED_SIZE, 388, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 452, Short.MAX_VALUE))
        );
        pnl_SearchLayout.setVerticalGroup(
            pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_SearchLayout.createSequentialGroup()
                .addComponent(txt_SearchServices, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add(pnl_Search, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 840, 40));

        pnl_Title_ListService.setBackground(new Color(255, 255, 255));

        lbl_Title_ListService.setFont(new Font("Segoe UI", 1, 15)); // NOI18N
        lbl_Title_ListService.setForeground(new Color(153, 153, 255));
        lbl_Title_ListService.setText("Danh sách dịch vụ:");

        GroupLayout pnl_Title_ListServiceLayout = new GroupLayout(pnl_Title_ListService);
        pnl_Title_ListService.setLayout(pnl_Title_ListServiceLayout);
        pnl_Title_ListServiceLayout.setHorizontalGroup(
            pnl_Title_ListServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Title_ListServiceLayout.createSequentialGroup()
                .addComponent(lbl_Title_ListService)
                .addGap(0, 699, Short.MAX_VALUE))
        );
        pnl_Title_ListServiceLayout.setVerticalGroup(
            pnl_Title_ListServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, pnl_Title_ListServiceLayout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl_Title_ListService)
                .addContainerGap())
        );

        add(pnl_Title_ListService, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 830, 30));

        pnl_ListService.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        pnl_ListService.setLayout(new BorderLayout());

        table_ListService.setColumnNames(new String[] {"Mã dịch vụ", "Tên dịch vụ", "Giá", "Mô tả", "Trạng thái"});
        table_ListService.setHeaderBackgroundColor(new Color(153, 153, 255));
        pnl_ListService.add(table_ListService, BorderLayout.CENTER);

        add(pnl_ListService, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 105, 860, 220));

        pnl_CartService.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        pnl_CartService.setLayout(new BorderLayout());

        table_CartService.setColumnNames(new String[] {"Mã dịch vụ", "Tên dịch vụ", "Số lượng", "Giá", "Thành tiền"});
        table_CartService.setHeaderBackgroundColor(new Color(153, 153, 255));
        pnl_CartService.add(table_CartService, BorderLayout.CENTER);

        add(pnl_CartService, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, 550, 180));

        pnl_InforAddService.setBackground(new Color(255, 255, 255));
        pnl_InforAddService.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));

        pnl_Title_TotalPrice.setBackground(new Color(255, 255, 255));
        pnl_Title_TotalPrice.setLayout(new BorderLayout());

        lbl_Title_TotalPrice.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        lbl_Title_TotalPrice.setText("Tổng tiền:");
        pnl_Title_TotalPrice.add(lbl_Title_TotalPrice, BorderLayout.CENTER);

        pnl_TotalPrice.setBackground(new Color(255, 255, 255));
        pnl_TotalPrice.setLayout(new BorderLayout());

        lbl_TotalPrice_Value.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        lbl_TotalPrice_Value.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        pnl_TotalPrice.add(lbl_TotalPrice_Value, BorderLayout.CENTER);

        btn_Complete.setText("Hoàn tất");
        btn_Complete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CompleteActionPerformed(evt);
            }
        });

        btn_Cancel.setText("Hủy");
        btn_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CancelActionPerformed(evt);
            }
        });

        GroupLayout pnl_InforAddServiceLayout = new GroupLayout(pnl_InforAddService);
        pnl_InforAddService.setLayout(pnl_InforAddServiceLayout);
        pnl_InforAddServiceLayout.setHorizontalGroup(
            pnl_InforAddServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InforAddServiceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_InforAddServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_InforAddServiceLayout.createSequentialGroup()
                        .addComponent(pnl_Title_TotalPrice, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnl_TotalPrice, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnl_InforAddServiceLayout.createSequentialGroup()
                        .addComponent(btn_Complete, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btn_Cancel, GroupLayout.PREFERRED_SIZE, 132, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnl_InforAddServiceLayout.setVerticalGroup(
            pnl_InforAddServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InforAddServiceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_InforAddServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_TotalPrice, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_Title_TotalPrice, GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_InforAddServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(btn_Complete, GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(btn_Cancel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        add(pnl_InforAddService, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 450, 300, 130));

        btn_AddService.setText("Thêm");
        btn_AddService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddServiceActionPerformed(evt);
            }
        });
        add(btn_AddService, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 110, 30));

        pnl_Title_SelectedService.setBackground(new Color(255, 255, 255));

        lbl_Title_SelectedService.setFont(new Font("Segoe UI", 1, 15)); // NOI18N
        lbl_Title_SelectedService.setForeground(new Color(153, 153, 255));
        lbl_Title_SelectedService.setText("Dịch vụ được chọn:");

        btn_DeleteOne.setText("Xóa");
        btn_DeleteOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteOneActionPerformed(evt);
            }
        });

        btn_DeleteAll.setText("Xóa tất cả");
        btn_DeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteAllActionPerformed(evt);
            }
        });

        GroupLayout pnl_Title_SelectedServiceLayout = new GroupLayout(pnl_Title_SelectedService);
        pnl_Title_SelectedService.setLayout(pnl_Title_SelectedServiceLayout);
        pnl_Title_SelectedServiceLayout.setHorizontalGroup(
            pnl_Title_SelectedServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Title_SelectedServiceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Title_SelectedService)
                .addGap(233, 233, 233)
                .addComponent(btn_DeleteOne, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_DeleteAll, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(281, Short.MAX_VALUE))
        );
        pnl_Title_SelectedServiceLayout.setVerticalGroup(
            pnl_Title_SelectedServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_Title_SelectedServiceLayout.createSequentialGroup()
                .addGroup(pnl_Title_SelectedServiceLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, pnl_Title_SelectedServiceLayout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_Title_SelectedService))
                    .addGroup(GroupLayout.Alignment.TRAILING, pnl_Title_SelectedServiceLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_DeleteAll, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_DeleteOne, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        add(pnl_Title_SelectedService, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 830, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void btn_AddServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddServiceActionPerformed
        addServiceToCart();
    }//GEN-LAST:event_btn_AddServiceActionPerformed

    private void btn_CompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CompleteActionPerformed
        completeSelectedServices();
    }//GEN-LAST:event_btn_CompleteActionPerformed

    private void btn_DeleteOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteOneActionPerformed
        int selectedRow = table_CartService.getTable().getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dịch vụ để xóa.",
                    "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int modelRow = table_CartService.getTable().convertRowIndexToModel(selectedRow);
        CustomTableButton.CustomTableModel model = table_CartService.getTableModel();
        model.removeRow(modelRow);
        updateCartTotal();
    }//GEN-LAST:event_btn_DeleteOneActionPerformed

    private void btn_DeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteAllActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa tất cả dịch vụ trong giỏ hàng?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            CustomTableButton.CustomTableModel model = table_CartService.getTableModel();
            model.clearData();
            updateCartTotal();
        }
    }//GEN-LAST:event_btn_DeleteAllActionPerformed

    private void btn_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CancelActionPerformed
        cancel();
    }//GEN-LAST:event_btn_CancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ui.components.button.ButtonCustom btn_AddService;
    private ui.components.button.ButtonCancelCustom btn_Cancel;
    private ui.components.button.ButtonCustom btn_Complete;
    private ui.components.button.ButtonCancelCustom btn_DeleteAll;
    private ui.components.button.ButtonCancelCustom btn_DeleteOne;
    private JLabel lbl_RoomID;
    private JLabel lbl_Title;
    private JLabel lbl_Title_ListService;
    private JLabel lbl_Title_SelectedService;
    private JLabel lbl_Title_TotalPrice;
    private JLabel lbl_TotalPrice_Value;
    private JPanel pnl_CartService;
    private JPanel pnl_InforAddService;
    private JPanel pnl_ListService;
    private JPanel pnl_Search;
    private JPanel pnl_Title;
    private JPanel pnl_Title_ListService;
    private JPanel pnl_Title_SelectedService;
    private JPanel pnl_Title_TotalPrice;
    private JPanel pnl_TotalPrice;
    private CustomTableButton table_CartService;
    private CustomTableButton table_ListService;
    private ui.components.textfield.SearchTextField txt_SearchServices;
    // End of variables declaration//GEN-END:variables

    /**
     * Adds the selected service to the cart.
     */
    private void addServiceToCart() {
        try {
            int selectedRow = table_ListService.getTable().getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Vui lòng chọn dịch vụ để thêm vào giỏ hàng.",
                        "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int modelRow = table_ListService.getTable().convertRowIndexToModel(selectedRow);
            Object[] rowData = table_ListService.getTableModel().getRowData(modelRow);

            String status = (String) rowData[4];
            if (!status.equals("Có sẵn")) {
                JOptionPane.showMessageDialog(this, "Dịch vụ không có sẵn.",
                        "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int serviceId = (int) rowData[0];
            String serviceName = (String) rowData[1];
            String priceStr = (String) rowData[2];
            double price = Double.parseDouble(priceStr.replaceAll("[^\\d.]", ""));
            int quantity = 1;

            // Kiểm tra xem dịch vụ đã có trong giỏ hàng chưa
            boolean isInCart = isServiceInCart(serviceId);
            if (isInCart) {
                JOptionPane.showMessageDialog(this, "Dịch vụ đã có trong giỏ hàng.",
                        "Thông báo", JOptionPane.WARNING_MESSAGE);
                return;
            }

            addToCart(serviceId, serviceName, price, quantity);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi thêm dịch vụ: " + e.getMessage(),
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Checks if a service is already in the cart.
     *
     * @param serviceId The ID of the service to check.
     * @return true if the service is in the cart, false otherwise.
     */
    private boolean isServiceInCart(int serviceId) {
        CustomTableButton.CustomTableModel model = table_CartService.getTableModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Object[] rowData = model.getRowData(i);
            if ((int) rowData[0] == serviceId) {
                return true;
            }
        }
        return false;
    }

    /**
     * Adds a service to the cart table.
     *
     * @param serviceId   The ID of the service.
     * @param serviceName The name of the service.
     * @param price       The price of the service.
     * @param quantity    The quantity of the service.
     */
    private void addToCart(int serviceId, String serviceName, double price, int quantity) {
        try {
            // Calculate the total price for this item
            double totalPrice = price * quantity;

            // Create row data with correct types
            Object[] cartRowData = {
                    Integer.valueOf(serviceId),         // String
                    serviceName,                       // String
                    Integer.valueOf(quantity),         // Integer object, not primitive int
                    String.format("%,.0f VND", price), // Formatted price string
                    String.format("%,.0f VND", totalPrice) // Formatted total string
            };

            // Add to table
            table_CartService.getTableModel().addRow(cartRowData, null);

            // Update the total price display
            updateCartTotal();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi khi thêm dịch vụ: " + e.getMessage(),
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Updates the total price label based on the items in the cart.
     */
    private void updateCartTotal() {
        try {
            double currentTotalPrice = 0;
            CustomTableButton.CustomTableModel model = table_CartService.getTableModel();

            for (int i = 0; i < model.getRowCount(); i++) {
                Object[] cartRow = model.getRowData(i);
                String totalPriceString = (String) cartRow[4]; // Get the formatted total price
                double rowTotalPrice = Double.parseDouble(totalPriceString.replaceAll("[^\\d.]", ""));
                currentTotalPrice += rowTotalPrice;
            }

            lbl_TotalPrice_Value.setText(String.format("%,.0f VND", currentTotalPrice));

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi tính tổng tiền: " + e.getMessage(),
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }


    /**
     * Updates the price of a specific row in the cart table based on the quantity.
     *
     * @param row The index of the row to update.
     */
    private void updateRowPrice(int row) {
        try {
            CustomTableButton.CustomTableModel model = table_CartService.getTableModel();
            Object[] rowData = model.getRowData(row);

            int quantity = (int) rowData[2]; // Get the quantity
            String priceStr = (String) rowData[3]; // Get the price string
            double price = Double.parseDouble(priceStr.replaceAll("[^\\d.]", "")); // Extract numeric value

            double rowTotal = price * quantity;

            rowData[4] = String.format("%,.0f VND", rowTotal);

            model.fireTableCellUpdated(row, 4);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi cập nhật giá dịch vụ: " + e.getMessage(),
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Completes the selected services and closes the dialog.
     */
    @SneakyThrows
    private void completeSelectedServices() {
        CustomTableButton.CustomTableModel model = table_CartService.getTableModel();
        selectedService = new ArrayList<>();

        for (int i = 0; i < model.getRowCount(); i++) {
            Object[] rowData = model.getRowData(i);
            int serviceId = (int) rowData[0];
            int quantity = (int) rowData[2];

            ServicesDAO servicesDAO = new ServicesDAOImpl();
            Service service = servicesDAO.findServiceByID(serviceId);

            ReservationDetails reservationDetails = new ReservationDetails();
            reservationDetails.setService(service);
            reservationDetails.setQuantity(quantity);
            selectedService.add(reservationDetails);
        }

        // Close the dialog
        Window window = SwingUtilities.getWindowAncestor(this);
        window.dispose();
    }

    public void updateTableCartAfterClickUpdate(List<ReservationDetails> listReservationDetails) {
        CustomTableButton.CustomTableModel model = table_CartService.getTableModel();
        model.clearData();

        for (ReservationDetails reservationDetails : listReservationDetails) {
            double price = reservationDetails.getService().getPrice();
            int quantity = reservationDetails.getQuantity();
            int serviceId = reservationDetails.getService().getServiceId();
            String serviceName = reservationDetails.getService().getName();
            addToCart(serviceId, serviceName, price, quantity);
        }

        updateCartTotal();
    }

    private void cancel() {
        Window window = SwingUtilities.getWindowAncestor(this);
        window.dispose();
    }
}
