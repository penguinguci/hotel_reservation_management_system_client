/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package ui.forms;

import dao.AccountDAOImpl;
import dao.CustomerDAOImpl;
import dao.GenericDAOImpl;
import dao.StaffDAOImpl;
import entities.Account;
import entities.Customer;
import entities.Role;
import entities.Staff;
import interfaces.AccountDAO;
import interfaces.CustomerDAO;
import interfaces.GenericDAO;
import interfaces.StaffDAO;
import jakarta.persistence.EntityTransaction;
import lombok.SneakyThrows;
import net.coobird.thumbnailator.Thumbnails;
import org.apache.poi.ss.usermodel.Cell;
import ui.components.table.CustomTableButton;
import ultilities.GenerateString;
import ultilities.ImageConverter;
import ultilities.RegexPattern;
import utils.AppUtil;
import utils.DateUtil;
import utils.ExcelUtil;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.rmi.RemoteException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 * @author Lenovo
 */
public class Form_CustomerManagement extends JPanel implements ListSelectionListener{

    /** Creates new form Form_StaffManagement */
    public Form_CustomerManagement() {
        initComponents();
        initTableListener();
        initComboboxGender();
        initComboboxGenderSearch();
        loadStaffData();
    }

    private void initTableListener() {
        table.getTable().getSelectionModel().addListSelectionListener(this);
    }

    private void initComboboxGender() {
        String[] genders = {"Nam", "Nữ"};
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Chọn giới tính");
        for (String gender : genders) {
            model.addElement(gender);
        }
        cbx_Gender.setModel(model);
    }

    private void initComboboxGenderSearch() {
        String[] genders = {"Nam", "Nữ"};
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Chọn giới tính");
        for (String gender : genders) {
            model.addElement(gender);
        }
        cbx_GenderSearch.setModel(model);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_Title = new JPanel();
        jLabel1 = new JLabel();
        pnl_Infor = new JPanel();
        pnl_Input = new JPanel();
        pnl_InforLeft = new JPanel();
        jPanel1 = new JPanel();
        lbl_FirstName = new JLabel();
        lbl_Phone = new JLabel();
        lbl_CCCD = new JLabel();
        lbl_Gender = new JLabel();
        lbl_BirthDate = new JLabel();
        jPanel2 = new JPanel();
        txt_FirstName = new JTextField();
        txt_Phone = new JTextField();
        txt_CCCD = new JTextField();
        cbx_Gender = new ui.components.combobox.StyledComboBox();
        calendar_BirthDate = new ui.components.calendar.CustomCalendar();
        pnl_InforRight = new JPanel();
        jPanel3 = new JPanel();
        lbl_LastName = new JLabel();
        lbl_Email = new JLabel();
        lbl_Point = new JLabel();
        lbl_Address = new JLabel();
        jPanel4 = new JPanel();
        txt_LastName = new JTextField();
        txt_Email = new JTextField();
        txt_Point = new JTextField();
        txt_Address = new JTextField();
        btn_Clear = new ui.components.button.ButtonCancelCustom();
        pnl_Search = new JPanel();
        jPanel5 = new JPanel();
        lbl_StaffIDSearch = new JLabel();
        lbl_NameSearch = new JLabel();
        lbl_PhoneSearch = new JLabel();
        lbl_GenderSearch = new JLabel();
        lbl_CCCD_Search = new JLabel();
        jPanel6 = new JPanel();
        txt_IDSearch = new JTextField();
        txt_NameSearch = new JTextField();
        txt_PhoneSearch = new JTextField();
        cbx_GenderSearch = new ui.components.combobox.StyledComboBox();
        txt_CCCD_Search = new JTextField();
        btn_Search = new ui.components.button.ButtonCustom();
        pnl_ListStaff = new JPanel();
        table = new CustomTableButton();
        pnl_GroupButton = new JPanel();
        btn_Add = new ui.components.button.ButtonCustom();
        btn_Update = new ui.components.button.ButtonCustom();
        btn_Import = new ui.components.button.ButtonCustom();
        btn_Export = new ui.components.button.ButtonCustom();

        setBackground(new Color(255, 255, 255));
        setPreferredSize(new Dimension(1200, 1052));

        pnl_Title.setBackground(new Color(255, 255, 255));
        pnl_Title.setLayout(new BorderLayout());

        jLabel1.setFont(new Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new Color(153, 153, 255));
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Quản lý khách hàng");
        pnl_Title.add(jLabel1, BorderLayout.CENTER);

        pnl_Infor.setBackground(new Color(255, 255, 255));
        pnl_Infor.setBorder(BorderFactory.createTitledBorder(null, "Thông tin khách hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Segoe UI", 1, 16), new Color(153, 153, 255))); // NOI18N

        pnl_Input.setBackground(new Color(255, 255, 255));

        pnl_InforLeft.setBackground(new Color(255, 255, 255));

        jPanel1.setBackground(new Color(255, 255, 255));
        jPanel1.setLayout(new GridLayout(5, 1));

        lbl_FirstName.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_FirstName.setText("Họ:");
        jPanel1.add(lbl_FirstName);

        lbl_Phone.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Phone.setText("Số điện thoại:");
        jPanel1.add(lbl_Phone);

        lbl_CCCD.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_CCCD.setText("CCCD:");
        jPanel1.add(lbl_CCCD);

        lbl_Gender.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Gender.setText("Giới tính:");
        jPanel1.add(lbl_Gender);

        lbl_BirthDate.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_BirthDate.setText("Ngày sinh:");
        jPanel1.add(lbl_BirthDate);

        jPanel2.setBackground(new Color(255, 255, 255));
        jPanel2.setLayout(new GridLayout(5, 1, 0, 12));

        txt_FirstName.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_FirstName.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        jPanel2.add(txt_FirstName);

        txt_Phone.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_Phone.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        jPanel2.add(txt_Phone);

        txt_CCCD.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_CCCD.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        jPanel2.add(txt_CCCD);

        cbx_Gender.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        jPanel2.add(cbx_Gender);
        jPanel2.add(calendar_BirthDate);

        GroupLayout pnl_InforLeftLayout = new GroupLayout(pnl_InforLeft);
        pnl_InforLeft.setLayout(pnl_InforLeftLayout);
        pnl_InforLeftLayout.setHorizontalGroup(
            pnl_InforLeftLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InforLeftLayout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 242, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnl_InforLeftLayout.setVerticalGroup(
            pnl_InforLeftLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pnl_InforRight.setBackground(new Color(255, 255, 255));
        pnl_InforRight.setPreferredSize(new Dimension(300, 223));

        jPanel3.setBackground(new Color(255, 255, 255));
        jPanel3.setLayout(new GridLayout(5, 1));

        lbl_LastName.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_LastName.setText("Tên:");
        jPanel3.add(lbl_LastName);

        lbl_Email.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Email.setText("Email:");
        jPanel3.add(lbl_Email);

        lbl_Point.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Point.setText("Điểm:");
        jPanel3.add(lbl_Point);

        lbl_Address.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_Address.setText("Địa chỉ:");
        jPanel3.add(lbl_Address);

        jPanel4.setBackground(new Color(255, 255, 255));
        jPanel4.setLayout(new GridLayout(5, 1, 0, 12));

        txt_LastName.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_LastName.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        txt_LastName.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txt_LastNameActionPerformed(evt);
            }
        });
        jPanel4.add(txt_LastName);

        txt_Email.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_Email.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        jPanel4.add(txt_Email);

        txt_Point.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_Point.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        txt_Point.setEnabled(false);
        txt_Point.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txt_PointActionPerformed(evt);
            }
        });
        jPanel4.add(txt_Point);

        txt_Address.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_Address.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        jPanel4.add(txt_Address);

        GroupLayout pnl_InforRightLayout = new GroupLayout(pnl_InforRight);
        pnl_InforRight.setLayout(pnl_InforRightLayout);
        pnl_InforRightLayout.setHorizontalGroup(
            pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 357, Short.MAX_VALUE)
            .addGroup(pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(pnl_InforRightLayout.createSequentialGroup()
                    .addGap(28, 28, 28)
                    .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, 61, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(268, Short.MAX_VALUE)))
            .addGroup(pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, pnl_InforRightLayout.createSequentialGroup()
                    .addContainerGap(109, Short.MAX_VALUE)
                    .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, 242, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        pnl_InforRightLayout.setVerticalGroup(
            pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
            .addGroup(pnl_InforRightLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
        );

        GroupLayout pnl_InputLayout = new GroupLayout(pnl_Input);
        pnl_Input.setLayout(pnl_InputLayout);
        pnl_InputLayout.setHorizontalGroup(
            pnl_InputLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InputLayout.createSequentialGroup()
                .addComponent(pnl_InforLeft, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(pnl_InforRight, GroupLayout.PREFERRED_SIZE, 357, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_InputLayout.setVerticalGroup(
            pnl_InputLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(pnl_InforLeft, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnl_InforRight, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        btn_Clear.setText("Xóa trắng");
        btn_Clear.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_ClearActionPerformed(evt);
            }
        });

        GroupLayout pnl_InforLayout = new GroupLayout(pnl_Infor);
        pnl_Infor.setLayout(pnl_InforLayout);
        pnl_InforLayout.setHorizontalGroup(
            pnl_InforLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_InforLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_InforLayout.createSequentialGroup()
                        .addComponent(btn_Clear, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnl_InforLayout.createSequentialGroup()
                        .addComponent(pnl_Input, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(148, 148, 148))))
        );
        pnl_InforLayout.setVerticalGroup(
            pnl_InforLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_InforLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_Input, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_Clear, GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
        );

        pnl_Search.setBackground(new Color(255, 255, 255));
        pnl_Search.setBorder(BorderFactory.createTitledBorder(null, "Tìm kiếm khách hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new Font("Segoe UI", 1, 16), new Color(153, 153, 255))); // NOI18N
        pnl_Search.setPreferredSize(new Dimension(360, 29));

        jPanel5.setBackground(new Color(255, 255, 255));
        jPanel5.setLayout(new GridLayout(5, 1, 0, 5));

        lbl_StaffIDSearch.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_StaffIDSearch.setText("Mã khách hàng:");
        jPanel5.add(lbl_StaffIDSearch);

        lbl_NameSearch.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_NameSearch.setText("Họ và tên:");
        jPanel5.add(lbl_NameSearch);

        lbl_PhoneSearch.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_PhoneSearch.setText("Số điện thoại:");
        jPanel5.add(lbl_PhoneSearch);

        lbl_GenderSearch.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_GenderSearch.setText("Giới tính:");
        jPanel5.add(lbl_GenderSearch);

        lbl_CCCD_Search.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        lbl_CCCD_Search.setText("CCCD:");
        jPanel5.add(lbl_CCCD_Search);

        jPanel6.setBackground(new Color(255, 255, 255));
        jPanel6.setLayout(new GridLayout(5, 1, 0, 10));

        txt_IDSearch.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_IDSearch.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        jPanel6.add(txt_IDSearch);

        txt_NameSearch.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_NameSearch.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        txt_NameSearch.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txt_NameSearchActionPerformed(evt);
            }
        });
        jPanel6.add(txt_NameSearch);

        txt_PhoneSearch.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_PhoneSearch.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        jPanel6.add(txt_PhoneSearch);

        cbx_GenderSearch.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        jPanel6.add(cbx_GenderSearch);

        txt_CCCD_Search.setFont(new Font("Segoe UI", 0, 15)); // NOI18N
        txt_CCCD_Search.setBorder(BorderFactory.createLineBorder(new Color(204, 204, 204)));
        jPanel6.add(txt_CCCD_Search);

        btn_Search.setText("Tìm kiếm");
        btn_Search.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_SearchActionPerformed(evt);
            }
        });

        GroupLayout pnl_SearchLayout = new GroupLayout(pnl_Search);
        pnl_Search.setLayout(pnl_SearchLayout);
        pnl_SearchLayout.setHorizontalGroup(
            pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, pnl_SearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(pnl_SearchLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_Search, GroupLayout.PREFERRED_SIZE, 137, GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnl_SearchLayout.createSequentialGroup()
                        .addComponent(jPanel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel6, GroupLayout.PREFERRED_SIZE, 253, GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12))
        );
        pnl_SearchLayout.setVerticalGroup(
            pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(pnl_SearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_SearchLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addComponent(btn_Search, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
        );

        pnl_ListStaff.setBackground(new Color(255, 255, 255));
        pnl_ListStaff.setLayout(new BorderLayout());

        table.setColumnNames(new String[] {"Mã khách hàng", "Tên khách hàng", "Giới tính", "Ngày sinh", "Số điện thoại", "Email", "CCCD", "Địa chỉ", "Điểm"});
        table.setHeaderBackgroundColor(new Color(153, 153, 255));
        pnl_ListStaff.add(table, BorderLayout.CENTER);

        pnl_GroupButton.setBackground(new Color(255, 255, 255));
        pnl_GroupButton.setLayout(new GridLayout(4, 1, 0, 20));

        btn_Add.setText("Thêm");
        btn_Add.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_AddActionPerformed(evt);
            }
        });
        pnl_GroupButton.add(btn_Add);

        btn_Update.setText("Cập nhật");
        btn_Update.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_UpdateActionPerformed(evt);
            }
        });
        pnl_GroupButton.add(btn_Update);

        btn_Import.setText("Import");
        btn_Import.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_ImportActionPerformed(evt);
            }
        });
        pnl_GroupButton.add(btn_Import);

        btn_Export.setText("Export");
        btn_Export.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn_ExportActionPerformed(evt);
            }
        });
        pnl_GroupButton.add(btn_Export);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(pnl_Title, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_Infor, GroupLayout.PREFERRED_SIZE, 803, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_Search, GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_ListStaff, GroupLayout.PREFERRED_SIZE, 1102, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_GroupButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_Title, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnl_Infor, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_Search, GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_ListStaff, GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnl_GroupButton, GroupLayout.PREFERRED_SIZE, 256, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txt_LastNameActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txt_LastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_LastNameActionPerformed

    private void txt_PointActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txt_PointActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PointActionPerformed

    private void txt_NameSearchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txt_NameSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_NameSearchActionPerformed

    private void btn_AddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_AddActionPerformed
        add();
    }//GEN-LAST:event_btn_AddActionPerformed

    private void btn_UpdateActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_UpdateActionPerformed
        update();
    }//GEN-LAST:event_btn_UpdateActionPerformed

    private void btn_ImportActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_ImportActionPerformed
        importData();
    }//GEN-LAST:event_btn_ImportActionPerformed

    private void btn_ExportActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_ExportActionPerformed
        exportData();
    }//GEN-LAST:event_btn_ExportActionPerformed

    private void btn_SearchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_SearchActionPerformed
        search();
    }//GEN-LAST:event_btn_SearchActionPerformed

    private void btn_ClearActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn_ClearActionPerformed
        clearForm();
    }//GEN-LAST:event_btn_ClearActionPerformed
    private void btnResetActionPerformed(ActionEvent evt) {

    }

    // Hàm Validate dữ liệu
    private boolean validateInput() {
        if (txt_FirstName.getText().trim().isEmpty() || txt_LastName.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Họ và tên không được để trống!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_FirstName.requestFocus();
            return false;
        }

        String phone = txt_Phone.getText().trim();
        if (!phone.matches(RegexPattern.PHONE_VN)) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_Phone.requestFocus();
            return false;
        } else if (phone.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không được để trống!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_Phone.requestFocus();
            return false;
        }

        String email = txt_Email.getText().trim();
        if (!email.isEmpty() && !email.matches(RegexPattern.EMAIL)) {
            JOptionPane.showMessageDialog(this, "Email không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_Email.requestFocus();
            return false;
        }

        String gender = cbx_Gender.getSelectedItem().toString();
        if (gender.equals("Chọn giới tính")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn giới tính", "Lỗi", JOptionPane.ERROR_MESSAGE);
            cbx_Gender.requestFocus();
            return false;
        }


        if (calendar_BirthDate.getSelectedDate() == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ngày sinh!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            calendar_BirthDate.requestFocus();
            return false;
        }

        if (txt_CCCD.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "CCCD không được để trống!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_CCCD.requestFocus();
            return false;
        } else if (!txt_CCCD.getText().matches(RegexPattern.CCCD)) {
            JOptionPane.showMessageDialog(this, "CCCD không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            txt_CCCD.requestFocus();
            return false;
        }

        return true;
    }

    private void clearForm() {
        txt_FirstName.setText("");
        txt_LastName.setText("");
        txt_Phone.setText("");
        txt_Email.setText("");
        txt_Address.setText("");
        cbx_Gender.setSelectedIndex(0);
        txt_CCCD.setText("");
        txt_CCCD.setEnabled(true);
        txt_Point.setText("");
        calendar_BirthDate.setSelectedDate(null);
        table.getTable().clearSelection();

        txt_NameSearch.setText("");
        txt_PhoneSearch.setText("");
        txt_CCCD_Search.setText("");
        cbx_GenderSearch.setSelectedIndex(0);
        txt_IDSearch.setText("");

        loadStaffData();
    }

    private void loadStaffData() {
        try {
            CustomerDAO customerDAO = new CustomerDAOImpl();
            CustomTableButton.CustomTableModel model = table.getTableModel();
            model.clearData();

            for (Customer customer : customerDAO.findAll()) {
                Object[] rowData = {
                        customer.getCustomerId(),
                        customer.getFirstName() + " " + customer.getLastName(),
                        customer.isGender() ? "Nam" : "Nữ",
                        customer.getDateOfBirth(),
                        customer.getPhoneNumber(),
                        customer.getEmail(),
                        customer.getCCCD(),
                        customer.getAddress(),
                        customer.getBonusPoint()
                };
                model.addRow(rowData, null);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tải dữ liệu nhân viên", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }



    // Add staff
    private void add() {
        if (!validateInput()) {
            return;
        }

        EntityTransaction transaction = null;
        try {
            CustomerDAO customerDAO = new CustomerDAOImpl();

            String phone = txt_Phone.getText().trim();
            if (customerDAO.isPhoneExists(phone)) {
                JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String email = txt_Email.getText().trim();
            if (customerDAO.isEmailExists(email)) {
                JOptionPane.showMessageDialog(this, "Email đã tồn tại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }

            Customer newCustomer = new Customer();
            newCustomer.setCustomerId(GenerateString.generateCustomerID());
            newCustomer.setFirstName(txt_FirstName.getText().trim());
            newCustomer.setLastName(txt_LastName.getText().trim());

            String gender = cbx_Gender.getSelectedItem().toString();
            newCustomer.setGender(gender.equals("Nam"));
            newCustomer.setDateOfBirth(calendar_BirthDate.getSelectedDate());
            newCustomer.setPhoneNumber(phone);
            newCustomer.setEmail(email);
            newCustomer.setCCCD(txt_CCCD.getText().trim());
            newCustomer.setAddress(txt_Address.getText().trim());
            newCustomer.setBonusPoint(0);

            // Xử lý transaction
            transaction = AppUtil.getEntityManager().getTransaction();
            transaction.begin();
            if (customerDAO.create(newCustomer)) {
                transaction.commit();
                JOptionPane.showMessageDialog(this, "Thêm khách hàng thành công!", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                clearForm();
            } else {
                transaction.rollback();
                JOptionPane.showMessageDialog(this, "Thêm khách hàng thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            if (transaction != null && transaction.isActive()) {
                transaction.rollback();
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi thêm khách hàng!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            int row = table.getTable().getSelectedRow();
            System.out.println(row);
            if (row >= 0) {
                try {
                    fillRow(row);
                } catch (RemoteException ex) {
                    throw new RuntimeException(ex);
                }
            }
        }
    }

    private void fillRow(int row) throws RemoteException {
        CustomTableButton.CustomTableModel model = table.getTableModel();
        Object[] rowData = model.getRowData(row);

        String id = rowData[0].toString();
        CustomerDAO customerDAO = new CustomerDAOImpl();
        Customer customer = customerDAO.findById(id);
        txt_FirstName.setText(customer.getFirstName());
        txt_LastName.setText(customer.getLastName());
        txt_Phone.setText(customer.getPhoneNumber());
        txt_Email.setText(customer.getEmail());
        txt_CCCD.setText(customer.getCCCD());
        txt_CCCD.setEnabled(false);
        txt_Point.setText(String.valueOf(customer.getBonusPoint()));
        txt_Address.setText(customer.getAddress());
        cbx_Gender.setSelectedItem(customer.isGender() == true ? "Nam" : "Nữ");
        calendar_BirthDate.setSelectedDate(customer.getDateOfBirth());
    }


    // Update staff
    private void update() {
        int selectedRow = table.getTable().getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn khách hàng cần cập nhật!",
                    "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (!validateInput()) {
            return;
        }

        try {
            CustomerDAO customerDAO = new CustomerDAOImpl();

            CustomTableButton.CustomTableModel model = table.getTableModel();
            Object[] rowData = model.getRowData(selectedRow);

            String customerID = rowData[0].toString();
            Customer customer = customerDAO.findById(customerID);

            customer.setFirstName(txt_FirstName.getText() != null ? txt_FirstName.getText().trim() : "");
            customer.setLastName(txt_LastName.getText() != null ? txt_LastName.getText().trim() : "");
            customer.setGender(cbx_Gender.getSelectedIndex() == 1);
            customer.setDateOfBirth(calendar_BirthDate.getSelectedDate());
            customer.setPhoneNumber(txt_Phone.getText() != null ? txt_Phone.getText().trim() : "");
            customer.setAddress(txt_Address.getText() != null ? txt_Address.getText().trim() : "");
            customer.setEmail(txt_Email.getText() != null ? txt_Email.getText().trim() : "");
            customer.setCCCD(txt_CCCD.getText() != null ? txt_CCCD.getText().trim() : "");
            customer.setBonusPoint(Double.parseDouble(txt_Point.getText().trim()));

            boolean customerUpdated = customerDAO.update(customer);

            if (!customerUpdated) {
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin thất bại!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật khách hàng thành công!",
                        "Thành công", JOptionPane.INFORMATION_MESSAGE);
                loadStaffData();
                clearForm();
            }
        } catch (Exception e) {
            e.printStackTrace();
            String errorMessage = e.getMessage() != null ? e.getMessage() : "Lỗi không xác định: " + e.getClass().getName();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật: " + errorMessage,
                    "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Search customer
    @SneakyThrows
    private void search() {
        String id = txt_IDSearch.getText().trim();
        String name = txt_NameSearch.getText().trim();
        String phone = txt_PhoneSearch.getText().trim();
        Boolean gender = null;
        String cccd = txt_CCCD_Search.getText().trim();

        if (cbx_GenderSearch.getSelectedIndex() > 0) {
            gender = cbx_GenderSearch.getSelectedIndex() == 1;
        }

        CustomerDAO customerDAO = new CustomerDAOImpl();
        List<Customer> customerList = customerDAO.searchCustomerAdvanced(id, name, phone, gender, cccd);

        CustomTableButton.CustomTableModel model = table.getTableModel();
        model.clearData();

        for (Customer customer : customerList) {
            Object[] rowData = {
                    customer.getCustomerId(),
                    customer.getFirstName() + " " + customer.getLastName(),
                    customer.isGender() ? "Nam" : "Nữ",
                    customer.getDateOfBirth(),
                    customer.getPhoneNumber(),
                    customer.getEmail(),
                    customer.getCCCD(),
                    customer.getAddress(),
                    customer.getBonusPoint()
            };
            model.addRow(rowData, null);
        }
    }

    //    // Export
    private void exportData() {
        ExcelUtil.exportToExcel(
                table,
                "Xuất dữ liệu khách hàng",
                "Danh sách khách hàng",
                this
        );
    }

    // Import
    @SneakyThrows
    private void importData() {
        CustomerDAO customerDAO = new CustomerDAOImpl();

        boolean success =  ExcelUtil.importFromExcel(this, row -> {
            EntityTransaction transaction = AppUtil.getEntityManager().getTransaction();
            try {
                Customer customer = new Customer();
                customer.setCustomerId(getCellStringValue(row.getCell(0)));
                customer.setFirstName(getCellStringValue(row.getCell(1)).split(" ")[0]);
                customer.setLastName(getCellStringValue(row.getCell(1)).split(" ")[1]);

                String genderStr = getCellStringValue(row.getCell(2));
                customer.setGender("Nam".equalsIgnoreCase(genderStr));

                String dobStr = getCellStringValue(row.getCell(3));
                customer.setDateOfBirth(DateUtil.parseDateFlexible(dobStr));

                String phoneStr = getCellStringValue(row.getCell(4));
                customer.setPhoneNumber(phoneStr);

                customer.setEmail(getCellStringValue(row.getCell(5)));

                customer.setCCCD(getCellStringValue(row.getCell(6)));

                customer.setAddress(getCellStringValue(row.getCell(7)));

                String pointStr = getCellStringValue(row.getCell(8));
                customer.setBonusPoint(pointStr.isEmpty() ? 0 : Double.parseDouble(pointStr));

                if (customerDAO.isPhoneExists(phoneStr)) {
                    JOptionPane.showMessageDialog(this, "Số điện thoại đã tồn tại: " + phoneStr, "Lỗi", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                transaction.begin();
                customerDAO.create(customer);
                transaction.commit();
                return true;
            } catch (Exception e) {
                if (transaction.isActive()) {
                    transaction.rollback();
                }
                JOptionPane.showMessageDialog(this, "Lỗi khi nhập dữ liệu: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        });

        if (success) {
            loadStaffData();
        }
    }

    // Helper method to get cell value as String
    private String getCellStringValue(Cell cell) {
        if (cell == null) {
            return null;
        }
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue();
            case NUMERIC:
                return String.valueOf((int) cell.getNumericCellValue());
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            default:
                return "";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ui.components.button.ButtonCustom btn_Add;
    private ui.components.button.ButtonCancelCustom btn_Clear;
    private ui.components.button.ButtonCustom btn_Export;
    private ui.components.button.ButtonCustom btn_Import;
    private ui.components.button.ButtonCustom btn_Search;
    private ui.components.button.ButtonCustom btn_Update;
    private ui.components.calendar.CustomCalendar calendar_BirthDate;
    private ui.components.combobox.StyledComboBox cbx_Gender;
    private ui.components.combobox.StyledComboBox cbx_GenderSearch;
    private JLabel jLabel1;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JLabel lbl_Address;
    private JLabel lbl_BirthDate;
    private JLabel lbl_CCCD;
    private JLabel lbl_CCCD_Search;
    private JLabel lbl_Email;
    private JLabel lbl_FirstName;
    private JLabel lbl_Gender;
    private JLabel lbl_GenderSearch;
    private JLabel lbl_LastName;
    private JLabel lbl_NameSearch;
    private JLabel lbl_Phone;
    private JLabel lbl_PhoneSearch;
    private JLabel lbl_Point;
    private JLabel lbl_StaffIDSearch;
    private JPanel pnl_GroupButton;
    private JPanel pnl_Infor;
    private JPanel pnl_InforLeft;
    private JPanel pnl_InforRight;
    private JPanel pnl_Input;
    private JPanel pnl_ListStaff;
    private JPanel pnl_Search;
    private JPanel pnl_Title;
    private CustomTableButton table;
    private JTextField txt_Address;
    private JTextField txt_CCCD;
    private JTextField txt_CCCD_Search;
    private JTextField txt_Email;
    private JTextField txt_FirstName;
    private JTextField txt_IDSearch;
    private JTextField txt_LastName;
    private JTextField txt_NameSearch;
    private JTextField txt_Phone;
    private JTextField txt_PhoneSearch;
    private JTextField txt_Point;
    // End of variables declaration//GEN-END:variables

}
